{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","prestaAtencion","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","pat","type","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","setCategories","ReactDom","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACA,sBAAMC,SAPe,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,GAC9BR,GAAe,SAAAS,GAAG,4BAAQA,GAAR,CAAaP,QAInC,SACQ,uBACIQ,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GAG3BQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAcE,EAAEU,OAAOJ,a,+BCRdK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,yDAC+CC,UAAUH,GADzD,sDAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GACd,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAV1B,kBAeZM,GAfY,4CAAH,sDCCPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAIzB,ECL4B,SAACA,GACzB,MAAyBhB,mBAAS,CACtCuB,KAAK,GACLa,SAAQ,IAFJ,mBAAMC,EAAN,KAAaC,EAAb,KAgBA,OAVAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IAEGqB,EDZaK,CAAa1B,GAA9BO,EAAP,EAAOA,KAAMa,EAAb,EAAaA,QAMT,OACI,qCACE,6BAAKpB,IACJoB,GAAW,wCACd,qBAAKJ,UAAU,YAAf,SAEQT,EAAKE,KAAI,SAAAC,GAAG,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aElBpBgB,EAAe,WAGzB,MAAoC3C,mBAAU,CAAC,WAA/C,mBAAO4C,EAAP,KAAmBC,EAAnB,KAIA,OACK,gCACI,8CACA,cAAC,EAAD,CAAa9C,eAAgB8C,IAC7B,uBAEA,6BAEQD,EAAWnB,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAEvBA,SAAUA,GADLA,Y,MCd7B8B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5917c182.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({prestaAtencion}) => {\r\n    \r\n    const [inputValue, setinputValue] = useState('');        \r\n    const handleInputChange = (e)=> \r\n    {\r\n        \r\n    console.log(e.target.value);\r\n    setinputValue(e.target.value)\r\n    \r\n}\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n        prestaAtencion(pat => [...pat, inputValue]);\r\n        }\r\n    }\r\n    return(\r\n    <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n             />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    prestaAtencion: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async(category) =>{ \r\n    const url =    `http://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI(category)  }&api_key=FnCCkIB2Qfq8rsP01D9jqeIs89xswjn8`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n\r\n    const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images.downsized_medium.url\r\n            \r\n            }\r\n\r\n    })\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n//    const [images, setimages] = useState([]);\r\n  \r\nconst {data, loading} = useFetchGifs(category);\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n          <h3>{category}</h3>\r\n          {loading && <p>loading</p>}\r\n        <div className=\"card-grid\">\r\n            {\r\n                data.map(img => (\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        {...img}/>\r\n                 ) )\r\n            }  \r\n            \r\n               \r\n            \r\n        </div>\r\n                </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const[state, setState] = useState({\r\ndata:[],\r\nloading:true\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then(imgs=>{\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        })\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = [\"japonesas\", \"coreanas\", \"tetas\"];\r\n   const [categories, setCategories] = useState( [\"chinas\"])\r\n//    const handleAdd = () => {\r\n//         setCategories([...categories, \"milf\"])\r\n//    }\r\n   return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory prestaAtencion={setCategories}/>\r\n            <hr />\r\n           \r\n            <ol>\r\n                {\r\n                    categories.map(category => <GifGrid \r\n                        key={category}\r\n                        category={category}/>)\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport ReactDom from 'react-dom';\r\nimport { GifExpertApp } from \"./GifExpertApp\";\r\n\r\nimport './index.css';\r\n\r\nReactDom.render(\r\n    <GifExpertApp />,\r\n    document.getElementById('root')\r\n\r\n\r\n\r\n\r\n\r\n);"],"sourceRoot":""}